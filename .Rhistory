}
loci <- sort(unique(loci))
}
#
popFreq <- list()
for (locus in loci){
locusDF <- data.frame()
for (pop in pops){
filename <- paste(name, pop, paste0(locus, '.freq'),sep='_')
temp <- readLines(file(file.path(path, pop, filename), open='r'))
alleles <- c()
freq <- c()
for (t in temp[8:length(r)-1]){
all_freq <- unlist(strsplit(t, '\t'))
alleles <- c(alleles, all_freq[1])
freq <- c(freq, as.numeric(all_freq[2]))
}
partDF <- data.frame(alleles,freq)
names(partDF) <- c('alleles', pop)
if('alleles' %in% names(locusDF)){
locusDF <- merge(locusDF, partDF, all=T)
} else {
locusDF <- partDF
}
}
row.names(locusDF) <- locusDF$alleles
locusDF[is.na(locusDF)]=0
popFreq[[locus]] <- locusDF[,-1]
}
return(popFreq)
}
###########################################
#'@export
###########################################
genet.dist<-function(path='.',diploid=TRUE,method="Dch", loci=NULL, exclude='ALL'){
cl<-match.call()
if (is.genind(dat)) dat<-genind2hierfstat(dat)
if(!is.na(pmatch(method,"Dch")))
method<-"Dch"
METHODS<-c("Dch","Da","Ds","Fst","Dm","Dr","Cp","X2","Nei87","WC84")
method<-pmatch(method,METHODS)
if (is.na(method)) stop("Invalid distance method")
if (method==-1) stop("Ambiguous distance method")
if (method==9) {gdist<-pairwise.neifst(dat,diploid); return(stats::as.dist(gdist))}
if (method==10) {gdist<-pairwise.WCfst(dat,diploid);return(stats::as.dist(gdist))}
pft<-get.freq(path=path, loci=loci, exclude=exclude)
nl<-length(pft)
npop<-dim(pft[[1]])[2]
dist.loc<-array(numeric(npop^2*nl),c(npop,npop,nl))
if (method==1)    temp<-lapply(pft,function(x) 2*(1-t(x)^0.5%*%x^0.5))
if (method==2) temp<-lapply(pft,function(x) t(x)^0.5%*%x^0.5)
if (method %in% c(3,4,5)) temp<-lapply(pft,function(x) t(x)%*%x)
if (method==7) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) abs(y-z)))
,1,sum,na.rm=TRUE),nrow=npop))
if (method==6) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2))
,1,sum,na.rm=TRUE)/2,nrow=npop)^.5)
if (method==8) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2/(y+z)))
,1,sum,na.rm=TRUE),nrow=npop))
for (il in 1:nl){dist.loc[,,il]<-temp[[il]]}
rm(temp)
nlpp<-apply(dist.loc,c(1,2),function(x) sum(!is.na(x)))
if (method==1) gdist<-2/pi/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==2) gdist<-1-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method %in% c(3,4,5)) {
Jxy<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
}
if (method %in% c(4,5)){
dum<-apply(dist.loc,3,function(x) outer(diag(x),diag(x),FUN=function(y,z) (y+z)/2))
dum<-matrix(1/nlpp*apply(dum,1,sum,na.rm=TRUE),nrow=npop)
}
if (method==3) {
dum<-outer(diag(Jxy),diag(Jxy),FUN="*")
gdist<- -log(Jxy/dum^.5);
}
if (method==4) gdist<-(dum-Jxy)/(1-Jxy)
if (method==5) gdist<-(dum-Jxy)
if (method==6) gdist<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==7) gdist<-1/2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==8) gdist<-2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
return(stats::as.dist(gdist))
}
genet.dist('D:/Documents/PostDoc/uniffstat')
#if (is.genind(dat)) dat<-genind2hierfstat(dat)
if(!is.na(pmatch(method,"Dch")))
source('~/GitHub/uniffstat/R/genetdist.R')
###########################################
#'@export
###########################################
genet.dist<-function(path='.',diploid=TRUE,method="Dch", loci=NULL, exclude='ALL'){
cl<-match.call()
#if (is.genind(dat)) dat<-genind2hierfstat(dat)
if(!is.na(pmatch(method,"Dch")))
method<-"Dch"
METHODS<-c("Dch","Da","Ds","Fst","Dm","Dr","Cp","X2","Nei87","WC84")
method<-pmatch(method,METHODS)
if (is.na(method)) stop("Invalid distance method")
if (method==-1) stop("Ambiguous distance method")
if (method==9) {gdist<-pairwise.neifst(dat,diploid); return(stats::as.dist(gdist))}
if (method==10) {gdist<-pairwise.WCfst(dat,diploid);return(stats::as.dist(gdist))}
pft<-get.freq(path=path, loci=loci, exclude=exclude)
nl<-length(pft)
npop<-dim(pft[[1]])[2]
dist.loc<-array(numeric(npop^2*nl),c(npop,npop,nl))
if (method==1)    temp<-lapply(pft,function(x) 2*(1-t(x)^0.5%*%x^0.5))
if (method==2) temp<-lapply(pft,function(x) t(x)^0.5%*%x^0.5)
if (method %in% c(3,4,5)) temp<-lapply(pft,function(x) t(x)%*%x)
if (method==7) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) abs(y-z)))
,1,sum,na.rm=TRUE),nrow=npop))
if (method==6) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2))
,1,sum,na.rm=TRUE)/2,nrow=npop)^.5)
if (method==8) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2/(y+z)))
,1,sum,na.rm=TRUE),nrow=npop))
for (il in 1:nl){dist.loc[,,il]<-temp[[il]]}
rm(temp)
nlpp<-apply(dist.loc,c(1,2),function(x) sum(!is.na(x)))
if (method==1) gdist<-2/pi/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==2) gdist<-1-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method %in% c(3,4,5)) {
Jxy<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
}
if (method %in% c(4,5)){
dum<-apply(dist.loc,3,function(x) outer(diag(x),diag(x),FUN=function(y,z) (y+z)/2))
dum<-matrix(1/nlpp*apply(dum,1,sum,na.rm=TRUE),nrow=npop)
}
if (method==3) {
dum<-outer(diag(Jxy),diag(Jxy),FUN="*")
gdist<- -log(Jxy/dum^.5);
}
if (method==4) gdist<-(dum-Jxy)/(1-Jxy)
if (method==5) gdist<-(dum-Jxy)
if (method==6) gdist<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==7) gdist<-1/2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==8) gdist<-2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
return(stats::as.dist(gdist))
}
genet.dist('D:/Documents/PostDoc/uniffstat')
print(file.path(path, pop, filename))
#
popFreq <- list()
###########################################
#'@export
###########################################
get.freq <- function(path='.', loci=NULL, exclude = 'ALL', ...){
#Some initial parameter setup and autodetection for the populations and loci
pops <- setdiff(dir(path) , dir(path, pattern='\\.'))
pops <- setdiff(pops, exclude)
name <- unlist(strsplit(dir(file.path(path, pops[1]), pattern='.freq$')[1], paste0('_',pops[1],'_|\\.freq')))[1]
if(is.null(loci)){
for (pop in pops){
freq.files <- dir(file.path(path, pop), pattern='.freq$')
for (freq.file in freq.files){
loci <- c(loci,unlist(strsplit(freq.file, paste0('_',pop,'_|\\.freq')))[2])
#lines <- readLines(file(file.path(path, pop, freq.file), open='r'))
}
}
loci <- sort(unique(loci))
}
#
popFreq <- list()
for (locus in loci){
locusDF <- data.frame()
for (pop in pops){
filename <- paste(name, pop, paste0(locus, '.freq'),sep='_')
print(file.path(path, pop, filename))
temp <- readLines(file(file.path(path, pop, filename), open='r'))
alleles <- c()
freq <- c()
for (t in temp[8:length(r)-1]){
all_freq <- unlist(strsplit(t, '\t'))
alleles <- c(alleles, all_freq[1])
freq <- c(freq, as.numeric(all_freq[2]))
}
partDF <- data.frame(alleles,freq)
names(partDF) <- c('alleles', pop)
if('alleles' %in% names(locusDF)){
locusDF <- merge(locusDF, partDF, all=T)
} else {
locusDF <- partDF
}
}
row.names(locusDF) <- locusDF$alleles
locusDF[is.na(locusDF)]=0
popFreq[[locus]] <- locusDF[,-1]
}
return(popFreq)
}
genet.dist('D:/Documents/PostDoc/uniffstat')
genet.dist('D:/Documents/PostDoc/uniffstat')
###########################################
#'@export
###########################################
genet.dist<-function(path='.',diploid=TRUE,method="Dch", loci=NULL, exclude='ALL'){
cl<-match.call()
#if (is.genind(dat)) dat<-genind2hierfstat(dat)
if(!is.na(pmatch(method,"Dch")))
method<-"Dch"
METHODS<-c("Dch","Da","Ds","Fst","Dm","Dr","Cp","X2","Nei87","WC84")
method<-pmatch(method,METHODS)
if (is.na(method)) stop("Invalid distance method")
if (method==-1) stop("Ambiguous distance method")
if (method==9) {gdist<-pairwise.neifst(dat,diploid); return(stats::as.dist(gdist))}
if (method==10) {gdist<-pairwise.WCfst(dat,diploid);return(stats::as.dist(gdist))}
pft<-get.freq(path=path, loci=loci, exclude=exclude)
nl<-length(pft)
npop<-dim(pft[[1]])[2]
dist.loc<-array(numeric(npop^2*nl),c(npop,npop,nl))
return(pft)
if (method==1)    temp<-lapply(pft,function(x) 2*(1-t(x)^0.5%*%x^0.5))
if (method==2) temp<-lapply(pft,function(x) t(x)^0.5%*%x^0.5)
if (method %in% c(3,4,5)) temp<-lapply(pft,function(x) t(x)%*%x)
if (method==7) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) abs(y-z)))
,1,sum,na.rm=TRUE),nrow=npop))
if (method==6) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2))
,1,sum,na.rm=TRUE)/2,nrow=npop)^.5)
if (method==8) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2/(y+z)))
,1,sum,na.rm=TRUE),nrow=npop))
for (il in 1:nl){dist.loc[,,il]<-temp[[il]]}
rm(temp)
nlpp<-apply(dist.loc,c(1,2),function(x) sum(!is.na(x)))
if (method==1) gdist<-2/pi/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==2) gdist<-1-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method %in% c(3,4,5)) {
Jxy<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
}
if (method %in% c(4,5)){
dum<-apply(dist.loc,3,function(x) outer(diag(x),diag(x),FUN=function(y,z) (y+z)/2))
dum<-matrix(1/nlpp*apply(dum,1,sum,na.rm=TRUE),nrow=npop)
}
if (method==3) {
dum<-outer(diag(Jxy),diag(Jxy),FUN="*")
gdist<- -log(Jxy/dum^.5);
}
if (method==4) gdist<-(dum-Jxy)/(1-Jxy)
if (method==5) gdist<-(dum-Jxy)
if (method==6) gdist<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==7) gdist<-1/2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==8) gdist<-2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
return(stats::as.dist(gdist))
}
genet.dist('D:/Documents/PostDoc/uniffstat')
V <- genet.dist('D:/Documents/PostDoc/uniffstat')
V[[1]
]
t(V[[1]])
1-t(V[[1]])^0.5
2*(1-t(V[[1]])^0.5 %*% V[[1]]^0.5)
as.table(V[[1]])
as.matrix(V[[1]])
###########################################
#'@export
###########################################
get.freq <- function(path='.', loci=NULL, exclude = 'ALL', ...){
#Some initial parameter setup and autodetection for the populations and loci
pops <- setdiff(dir(path) , dir(path, pattern='\\.'))
pops <- setdiff(pops, exclude)
name <- unlist(strsplit(dir(file.path(path, pops[1]), pattern='.freq$')[1], paste0('_',pops[1],'_|\\.freq')))[1]
if(is.null(loci)){
for (pop in pops){
freq.files <- dir(file.path(path, pop), pattern='.freq$')
for (freq.file in freq.files){
loci <- c(loci,unlist(strsplit(freq.file, paste0('_',pop,'_|\\.freq')))[2])
#lines <- readLines(file(file.path(path, pop, freq.file), open='r'))
}
}
loci <- sort(unique(loci))
}
#
popFreq <- list()
for (locus in loci){
locusDF <- data.frame()
for (pop in pops){
filename <- paste(name, pop, paste0(locus, '.freq'),sep='_')
print(file.path(path, pop, filename))
temp <- readLines(file(file.path(path, pop, filename), open='r'))
alleles <- c()
freq <- c()
for (t in temp[8:length(r)-1]){
all_freq <- unlist(strsplit(t, '\t'))
alleles <- c(alleles, all_freq[1])
freq <- c(freq, as.numeric(all_freq[2]))
}
partDF <- data.frame(alleles,freq)
names(partDF) <- c('alleles', pop)
if('alleles' %in% names(locusDF)){
locusDF <- merge(locusDF, partDF, all=T)
} else {
locusDF <- partDF
}
}
row.names(locusDF) <- locusDF$alleles
locusDF[is.na(locusDF)]=0
popFreq[[locus]] <- as.matrix(locusDF[,-1])
}
return(popFreq)
}
###########################################
#'@export
###########################################
get.freq <- function(path='.', loci=NULL, exclude = 'ALL', ...){
#Some initial parameter setup and autodetection for the populations and loci
pops <- setdiff(dir(path) , dir(path, pattern='\\.'))
pops <- setdiff(pops, exclude)
name <- unlist(strsplit(dir(file.path(path, pops[1]), pattern='.freq$')[1], paste0('_',pops[1],'_|\\.freq')))[1]
if(is.null(loci)){
for (pop in pops){
freq.files <- dir(file.path(path, pop), pattern='.freq$')
for (freq.file in freq.files){
loci <- c(loci,unlist(strsplit(freq.file, paste0('_',pop,'_|\\.freq')))[2])
#lines <- readLines(file(file.path(path, pop, freq.file), open='r'))
}
}
loci <- sort(unique(loci))
}
#
popFreq <- list()
for (locus in loci){
locusDF <- data.frame()
for (pop in pops){
filename <- paste(name, pop, paste0(locus, '.freq'),sep='_')
temp <- readLines(file(file.path(path, pop, filename), open='r'))
alleles <- c()
freq <- c()
for (t in temp[8:length(r)-1]){
all_freq <- unlist(strsplit(t, '\t'))
alleles <- c(alleles, all_freq[1])
freq <- c(freq, as.numeric(all_freq[2]))
}
partDF <- data.frame(alleles,freq)
names(partDF) <- c('alleles', pop)
if('alleles' %in% names(locusDF)){
locusDF <- merge(locusDF, partDF, all=T)
} else {
locusDF <- partDF
}
}
row.names(locusDF) <- locusDF$alleles
locusDF[is.na(locusDF)]=0
popFreq[[locus]] <- as.matrix(locusDF[,-1])
}
return(popFreq)
}
###########################################
#'@export
###########################################
genet.dist<-function(path='.',diploid=TRUE,method="Dch", loci=NULL, exclude='ALL'){
cl<-match.call()
#if (is.genind(dat)) dat<-genind2hierfstat(dat)
if(!is.na(pmatch(method,"Dch")))
method<-"Dch"
METHODS<-c("Dch","Da","Ds","Fst","Dm","Dr","Cp","X2","Nei87","WC84")
method<-pmatch(method,METHODS)
if (is.na(method)) stop("Invalid distance method")
if (method==-1) stop("Ambiguous distance method")
if (method==9) {gdist<-pairwise.neifst(dat,diploid); return(stats::as.dist(gdist))}
if (method==10) {gdist<-pairwise.WCfst(dat,diploid);return(stats::as.dist(gdist))}
pft<-get.freq(path=path, loci=loci, exclude=exclude)
nl<-length(pft)
npop<-dim(pft[[1]])[2]
dist.loc<-array(numeric(npop^2*nl),c(npop,npop,nl))
if (method==1)    temp<-lapply(pft,function(x) 2*(1-t(x)^0.5%*%x^0.5))
if (method==2) temp<-lapply(pft,function(x) t(x)^0.5%*%x^0.5)
if (method %in% c(3,4,5)) temp<-lapply(pft,function(x) t(x)%*%x)
if (method==7) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) abs(y-z)))
,1,sum,na.rm=TRUE),nrow=npop))
if (method==6) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2))
,1,sum,na.rm=TRUE)/2,nrow=npop)^.5)
if (method==8) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2/(y+z)))
,1,sum,na.rm=TRUE),nrow=npop))
for (il in 1:nl){dist.loc[,,il]<-temp[[il]]}
rm(temp)
nlpp<-apply(dist.loc,c(1,2),function(x) sum(!is.na(x)))
if (method==1) gdist<-2/pi/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==2) gdist<-1-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method %in% c(3,4,5)) {
Jxy<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
}
if (method %in% c(4,5)){
dum<-apply(dist.loc,3,function(x) outer(diag(x),diag(x),FUN=function(y,z) (y+z)/2))
dum<-matrix(1/nlpp*apply(dum,1,sum,na.rm=TRUE),nrow=npop)
}
if (method==3) {
dum<-outer(diag(Jxy),diag(Jxy),FUN="*")
gdist<- -log(Jxy/dum^.5);
}
if (method==4) gdist<-(dum-Jxy)/(1-Jxy)
if (method==5) gdist<-(dum-Jxy)
if (method==6) gdist<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==7) gdist<-1/2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==8) gdist<-2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
return(stats::as.dist(gdist))
}
genet.dist('D:/Documents/PostDoc/uniffstat')
###########################################
#'@export
###########################################
genet.dist<-function(path='.',diploid=TRUE,method="Dch", loci=NULL, exclude='ALL'){
cl<-match.call()
if(!is.na(pmatch(method,"Dch")))
method<-"Dch"
METHODS<-c("Dch","Da","Ds","Fst","Dm","Dr","Cp","X2","Nei87","WC84")
method<-pmatch(method,METHODS)
if (is.na(method)) stop("Invalid distance method")
if (method==-1) stop("Ambiguous distance method")
if (method==9) {gdist<-pairwise.neifst(dat,diploid); return(stats::as.dist(gdist))}
if (method==10) {gdist<-pairwise.WCfst(dat,diploid);return(stats::as.dist(gdist))}
pft<-get.freq(path=path, loci=loci, exclude=exclude)
nl<-length(pft)
npop<-dim(pft[[1]])[2]
dist.loc<-array(numeric(npop^2*nl),c(npop,npop,nl))
print(pft)
if (method==1)    temp<-lapply(pft,function(x) 2*(1-t(x)^0.5%*%x^0.5))
if (method==2) temp<-lapply(pft,function(x) t(x)^0.5%*%x^0.5)
if (method %in% c(3,4,5)) temp<-lapply(pft,function(x) t(x)%*%x)
if (method==7) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) abs(y-z)))
,1,sum,na.rm=TRUE),nrow=npop))
if (method==6) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2))
,1,sum,na.rm=TRUE)/2,nrow=npop)^.5)
if (method==8) temp<-lapply(pft,function(x)
matrix(apply
(apply(x,1,
function(b) outer(b,b,
FUN=function(y,z) (y-z)^2/(y+z)))
,1,sum,na.rm=TRUE),nrow=npop))
for (il in 1:nl){dist.loc[,,il]<-temp[[il]]}
rm(temp)
nlpp<-apply(dist.loc,c(1,2),function(x) sum(!is.na(x)))
if (method==1) gdist<-2/pi/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==2) gdist<-1-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method %in% c(3,4,5)) {
Jxy<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
}
if (method %in% c(4,5)){
dum<-apply(dist.loc,3,function(x) outer(diag(x),diag(x),FUN=function(y,z) (y+z)/2))
dum<-matrix(1/nlpp*apply(dum,1,sum,na.rm=TRUE),nrow=npop)
}
if (method==3) {
dum<-outer(diag(Jxy),diag(Jxy),FUN="*")
gdist<- -log(Jxy/dum^.5);
}
if (method==4) gdist<-(dum-Jxy)/(1-Jxy)
if (method==5) gdist<-(dum-Jxy)
if (method==6) gdist<-1/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==7) gdist<-1/2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
if (method==8) gdist<-2/nlpp*apply(dist.loc,c(1,2),sum,na.rm=TRUE)
return(stats::as.dist(gdist))
}
genet.dist('D:/Documents/PostDoc/uniffstat')
library(roxygen2)
roxygenize()
roxygenize()
library(roxygen2)
roxygenise()
genet.dist()
library(roxygen2)
roxygenise()
load("~/GitHub/uniffstat/.RData")
